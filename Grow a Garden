-- Grow a Garden

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")
local lp = Players.LocalPlayer

-- Função que cria a tela de loading e retorna uma promise
local function createLoadingScreen()
    local promise = {}
    promise.completed = false
    promise.connection = nil
    
    -- Remove GUI antiga se existir
    pcall(function()
        if CoreGui:FindFirstChild("LoadingScreen") then
            CoreGui.LoadingScreen:Destroy()
        end
    end)

    -- Cria a UI de carregamento
    local gui = Instance.new("ScreenGui")
    gui.Name = "LoadingScreen"
    gui.IgnoreGuiInset = true
    gui.ResetOnSpawn = false
    gui.Parent = CoreGui
    pcall(function() syn.protect_gui(gui) end)

    local frame = Instance.new("Frame")
    frame.BackgroundColor3 = Color3.new(0, 0, 0)
    frame.BackgroundTransparency = 0.3
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.Parent = gui

    local image = Instance.new("ImageLabel")
    image.Size = UDim2.new(0, 300, 0, 300)
    image.Position = UDim2.new(0.5, -150, 0.35, -150)
    image.BackgroundTransparency = 1
    image.Image = "rbxassetid://75732220851513"
    image.Parent = frame

    local nameText = Instance.new("TextLabel")
    nameText.Size = UDim2.new(1, 0, 0, 40)
    nameText.Position = UDim2.new(0, 0, 0.65, 0)
    nameText.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameText.TextStrokeTransparency = 0.3
    nameText.BackgroundTransparency = 1
    nameText.Font = Enum.Font.FredokaOne
    nameText.TextScaled = true
    nameText.Text = "Verificando usuário: "..lp.Name.." (Conta: "..tostring(lp.AccountAge).." dias)"
    nameText.Parent = frame

    local barBG = Instance.new("Frame")
    barBG.Size = UDim2.new(0.6, 0, 0.03, 0)
    barBG.Position = UDim2.new(0.2, 0, 0.8, 0)
    barBG.BackgroundColor3 = Color3.new(1, 1, 1)
    barBG.BorderSizePixel = 0
    barBG.Parent = frame

    local bar = Instance.new("Frame")
    bar.Size = UDim2.new(0, 0, 1, 0)
    bar.BackgroundColor3 = Color3.new(0.7, 0.2, 0.6)
    bar.BorderSizePixel = 0
    bar.Parent = barBG

    -- Animação da barra de carregamento
    local tween = TweenService:Create(
        bar,
        TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.new(1, 0, 1, 0)}
    )
    tween:Play()

    -- Função para limpar a UI
    local function cleanup()
        if gui then
            gui:Destroy()
        end
        if promise.connection then
            promise.connection:Disconnect()
        end
    end

    -- Após a barra carregar, faz o fade out e destrói a UI
    promise.connection = tween.Completed:Connect(function()
        -- Fade out suave da UI
        TweenService:Create(frame, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
        TweenService:Create(barBG, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
        TweenService:Create(bar, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
        TweenService:Create(image, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 1}):Play()
        TweenService:Create(nameText, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
        
        -- Aguarda o fade out terminar
        task.delay(1.2, function()
            -- Toca som de conclusão
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://8486683243"
            sound.Volume = 0.5
            sound.PlayOnRemove = true
            sound.Parent = workspace
            sound:Destroy()
            
            -- Exibe a notificação de boas-vindas
            StarterGui:SetCore("SendNotification", {
                Title = "Coquette Hub, Grow a Garden",
                Text = "Bem-vindo à Coquette Hub ",
                Duration = 4
            })
            
            -- Marca como concluído e limpa
            promise.completed = true
            cleanup()
        end)
    end)
    
    return promise
end

-- Função para esperar até que a promise seja resolvida
local function waitForPromise(promise)
    while not promise.completed do
        task.wait()
    end
end

-- Uso:
local loadingPromise = createLoadingScreen()

-- Aqui você coloca o código que deve esperar até que o loading termine
waitForPromise(loadingPromise)

-- SEU CÓDIGO ABAIXO AQUI
print("Loading completo! Agora executando o resto do script...")
-- ... resto do seu código ...

-- Grow a Garden - Coquette Hub

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")
local lp = Players.LocalPlayer

-- (Seu loading screen aqui...)

-- Criação da janela
local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()
local Window = redzlib:MakeWindow({
    Title = "Coquette Hub 1.0",
    SubTitle = "by Lolytadev ",
    SaveFolder = "teste"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://135441295532401", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(35, 1) },
})

-- Tabs com ícones por nome
local Tab1 = Window:MakeTab({"Auto Farm", "leaf"})
local Tab2 = Window:MakeTab({"Player", "user"})
local Tab3 = Window:MakeTab({"Extras", "star"})

-- Valores padrão
local defaultWalkSpeed = 16
local defaultJumpPower = 50
local defaultGravity = 196.2

-- =========================
-- Tab: Auto Farm
-- =========================
local autoFarm = false
local autoSell = false



local lp = game:GetService("Players").LocalPlayer

Tab1:AddToggle({
    Name = "Auto Farm Grow a Garden",
    Description = "Coleta TODAS as frutas automaticamente e vende a cada 5min",
    Default = false,
    Callback = function(Value)
        _G.AutoFarmGG = Value
        
        if _G.AutoFarmGG then
            spawn(function()
                -- Configurações
                local sellPosition = Vector3.new(89.35, 5.89, 0.71) -- Posição do vendedor
                local lastSellTime = tick()
                
                -- Loop principal
                while _G.AutoFarmGG do
                    -- Coleta de frutas à distância
                    pcall(function()
                        -- Função recursiva para encontrar e coletar frutas
                        local function collectFruits(obj)
                            -- Verifica se é uma fruta (tem a estrutura de fruta)
                            if obj:IsA("BasePart") and obj.Name:match("Apple") and obj.Parent.Name:match("%d") then
                                -- Cria um ProximityPrompt virtual para coletar à distância
                                local virtualPrompt = Instance.new("ProximityPrompt")
                                virtualPrompt.Parent = obj
                                virtualPrompt.ActionText = "Coletar"
                                virtualPrompt.ObjectText = obj.Name
                                
                                -- Coleta a fruta
                                fireproximityprompt(virtualPrompt)
                                
                                -- Remove o prompt virtual após uso
                                task.wait(0.1)
                                virtualPrompt:Destroy()
                            end
                            
                            -- Continua procurando em filhos
                            for _, child in ipairs(obj:GetChildren()) do
                                collectFruits(child)
                            end
                        end
                        
                        -- Percorre todas as fazendas
                        for _, farmPlot in ipairs(workspace.Farm:GetChildren()) do
                            if farmPlot:FindFirstChild("Important") and farmPlot.Important:FindFirstChild("Plants_Physical") then
                                collectFruits(farmPlot.Important.Plants_Physical)
                            end
                        end
                    end)

                    -- Auto-venda a cada 5 minutos (300 segundos)
                    if tick() - lastSellTime >= 300 then
                        lastSellTime = tick()
                        
                        local char = lp.Character
                        if char and char:FindFirstChild("HumanoidRootPart") then
                            local hrp = char.HumanoidRootPart
                            local savedPos = hrp.CFrame
                            
                            -- Teleporta para vender
                            hrp.CFrame = CFrame.new(sellPosition)
                            
                            -- Tempo aumentado para 6 segundos (conforme solicitado)
                            task.wait(6) -- Espera 6 segundos para garantir a venda
                            
                            -- Vende o inventário
                            pcall(function()
                                game:GetService("ReplicatedStorage").GameEvents.Sell_Inventory:FireServer()
                            end)
                            
                            task.wait(1)
                            -- Volta para a posição original
                            hrp.CFrame = savedPos
                        end
                    end
                    
                    task.wait(1) -- Espera 1 segundo entre verificações
                end
            end)
        end
    end
})

Tab1:AddToggle({
    Name = "Auto Vender Frutas",
    Description = "Vende frutas automaticamente",
    Default = false,
    Callback = function(Value)
        autoSell = Value
        if autoSell then
            spawn(function()
                while autoSell do
                    for _, sell in pairs(workspace:GetDescendants()) do
                        if sell:IsA("BasePart") and (sell.Name:lower():find("sell") or sell.Name:lower():find("market")) then
                            pcall(function()
                                firetouchinterest(lp.Character.HumanoidRootPart, sell, 0)
                                firetouchinterest(lp.Character.HumanoidRootPart, sell, 1)
                            end)
                        end
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

Tab1:AddButton({
    Name = "Teleportar para o Mercado",
    Description = "Teleporta para o local de venda",
    Callback = function()
        for _, sell in pairs(workspace:GetDescendants()) do
            if sell:IsA("BasePart") and (sell.Name:lower():find("sell") or sell.Name:lower():find("market")) then
                lp.Character:PivotTo(sell.CFrame + Vector3.new(0, 5, 0))
                return
            end
        end
    end
})

-- =========================
-- Tab: Player
-- =========================
Tab2:AddSlider({
    Name = "Speed",
    Min = 16,
    Max = 200,
    Increase = 1,
    Default = defaultWalkSpeed,
    Callback = function(Value)
        local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.WalkSpeed = Value end
    end
})

Tab2:AddSlider({
    Name = "Jump Power",
    Min = 50,
    Max = 300,
    Increase = 1,
    Default = defaultJumpPower,
    Callback = function(Value)
        local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.JumpPower = Value end
    end
})

Tab2:AddSlider({
    Name = "Gravidade",
    Min = 50,
    Max = 400,
    Increase = 1,
    Default = defaultGravity,
    Callback = function(Value)
        workspace.Gravity = Value
    end
})

Tab2:AddButton({
    Name = "Resetar Speed/Jump/Gravidade",
    Description = "Volta tudo ao padrão",
    Callback = function()
        local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.WalkSpeed = defaultWalkSpeed
            hum.JumpPower = defaultJumpPower
        end
        workspace.Gravity = defaultGravity
    end
})

-- =========================
-- Tab: Extras
-- =========================
local infJump = false

Tab3:AddToggle({
    Name = "Infinite Jump",
    Description = "Pule infinitamente",
    Default = false,
    Callback = function(Value)
        infJump = Value
    end
})

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJump then
        local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

Tab3:AddButton({
    Name = "Teleportar para o Topo",
    Description = "Teleporta para o alto do mapa",
    Callback = function()
        local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = hrp.CFrame + Vector3.new(0, 200, 0)
        end
    end
})

Tab3:AddToggle({
    Name = "Anti-AFK",
    Description = "Evita ser kickado por inatividade",
    Default = true,
    Callback = function(Value)
        if Value and getconnections then
            for _,v in pairs(getconnections(lp.Idled)) do
                v:Disable()
            end
        end
    end
})
